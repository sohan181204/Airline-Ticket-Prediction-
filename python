import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings warnings.filterwarnings('ignore')

# Load the scraped data
df = pd.read_csv(r"C:\Users\heyit\Desktop\Airline Data\Dataset\Indian Airlines.csv")

# Display the first 10 rows print(df.head(10))

# Display the number of unique values for each column print(df.nunique())

# Display unique values for each categorical column for col in df:
if df[col].dtype == 'object': print(f"{col}: {df[col].unique()}"emindhimaakkkkkna
     print(f"{col}: {df[col].unique()}")
# Visualization 1: Number of flights by airline plt.figure(figsize=(15,5))
NF = sns.countplot(x='airline', data=df)
NF.set(xlabel='Airline in India', ylabel='No. of flights', title='No. of flight by Airlines') plt.show()

# Visualization 2: Price range according to class of travel plt.figure(figsize=(15,5))
CE = sns.stripplot(x='price', y='class', data=df)
CE.set(xlabel='Ticket cost', ylabel='Class of Travel', title='Price range according to Class of Travel')
plt.show()

# Visualization 3: Availability of tickets according to class of travel plt.figure(figsize=(15,5))
TA = sns.countplot(x='class', data=df)
TA.set(xlabel='Class of Travel', title='Availability of Tickets according to Class of Travel') plt.show()

# Visualization 4: Price vs. duration of flight for different airlines plt.figure(figsize=(15,5))
PD = sns.scatterplot(df['duration'], df['price'], hue=df['airline'])
PD.set(xlabel='Duration of flight', ylabel='Price of Ticket', title='Price Vs Duration of Flight for different Airlines')
plt.show()

# Visualization 5: Economy vs Business ticket prices by airlines plt.figure(figsize=(15,5))
AS = sns.barplot(x='airline', y='price', hue='class', data=df.sort_values('price')) AS.set(xlabel='Airlines in India', ylabel='Price of Ticket', title='Economy Vs Business Ticket Prices by Airlines')
plt.show()


           Visualization 6: Airline ticket prices based on days left before buying the ticket
df_temp = df.groupby(['days_left'])['price'].mean().reset_index() plt.figure(figsize=(15,5))
ax = plt.axes()
sns.regplot(x=df_temp.loc[df_temp['days_left'] == 1].days_left, y=df_temp.loc[df_temp['days_left'] == 1].price, data=df_temp, fit_reg=False, ax=ax) sns.regplot(x=df_temp.loc[(df_temp['days_left'] > 1) & (df_temp['days_left'] < 20)].days_left, y=df_temp.loc[(df_temp['days_left'] > 1) & (df_temp['days_left'] < 20)].price, data=df_temp, fit_reg=True, ax=ax)
sns.regplot(x=df_temp.loc[df_temp['days_left'] >= 20].days_left, y=df_temp.loc[df_temp['days_left'] >= 20].price, data=df_temp, fit_reg=True, ax=ax) ax.set(xlabel='Tickets booked before X days', ylabel='Price of Ticket', title='Airline ticket prices based on days left before buying the ticket')
plt.show()

# Visualization 7: Average price depending on duration of flight df_temp2 = df.groupby(['duration'])['price'].mean().reset_index() plt.figure(figsize=(15,5))
PD = sns.scatterplot(x='duration', y='price', data=df_temp2)
PD = sns.regplot(x='duration', y='price', data=df_temp2, order=2)
PD.set(xlabel='Duration of flight', ylabel='Price of Ticket', title='Average price depending on duration of flight')
plt.show()
# Visualization 8: Price of ticket depending on time of departure and arrival plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
sns.boxplot(data=df, x='departure_time', y='price', showfliers=False).set(xlabel='Departure Time', ylabel='Price of Ticket', title='Price of Ticket depending on time of departure') plt.subplot(1,2,2)
sns.boxplot(data=df, x='arrival_time', y='price', showfliers=False).set(xlabel='Arrival Time', ylabel='Price of Ticket', title='Price of Ticket depending on time of arrival')
plt.show()

# Visualization 9: Airline ticket prices based on the source and destination cities
ax = sns.relplot(x='destination_city', y='price', col='source_city', col_wrap=3, kind='line', data=df)
ax.fig.subplots_adjust(top=0.9)
ax.fig.suptitle('Airline ticket prices based on the source and destination cities') plt.show()

# Visualization 10: Price of airline tickets based on number of stops in economy and business class
fig, axs = plt.subplots(1,2, gridspec_kw={'width_ratios': [3,1]},
figsize=(15,5)) sns.barplot(y='price', x='airline', hue='stops',ata=df.loc[df['class'] == 'Economy'].sort_values('price', ascending=False), ax=axs[0])
axs[0].set(xlabel='Airlines', ylabel='Price of Ticket', title='Price of Airline tickets based on No. of Stops in Economy Class')
sns.barplot(y='price', x='airline', hue='stops', data=df.loc[df['class'] == 'Business'].sort_values('price', ascending=False), ax=axs[1])
axs[1].set(xlabel='Airlines', ylabel='Price of Ticket', title='Price of Airline tickets based on No. of Stops in Business Class')
plt.show()

















